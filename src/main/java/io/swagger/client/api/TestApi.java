/*
 * API для приложения для тестирования
 * Описание API для приложения для тестирования
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Answer;
import io.swagger.client.model.Exception;
import io.swagger.client.model.Question;
import io.swagger.client.model.Test;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TestApi {
    private ApiClient apiClient;

    public TestApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TestApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for finishTest
     * @param userUuid выбранный пользователь (required)
     * @param testId testId для поиска нужного теста (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call finishTestCall(Long userUuid, Long testId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/test/finish/{testId}"
            .replaceAll("\\{" + "testId" + "\\}", apiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userUuid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userUuid", userUuid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call finishTestValidateBeforeCall(Long userUuid, Long testId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling finishTest(Async)");
        }
        
        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling finishTest(Async)");
        }
        

        com.squareup.okhttp.Call call = finishTestCall(userUuid, testId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * конец теста и получение результата
     * метод предназначен для завершения теста
     * @param userUuid выбранный пользователь (required)
     * @param testId testId для поиска нужного теста (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Long finishTest(Long userUuid, Long testId) throws ApiException {
        ApiResponse<Long> resp = finishTestWithHttpInfo(userUuid, testId);
        return resp.getData();
    }

    /**
     * конец теста и получение результата
     * метод предназначен для завершения теста
     * @param userUuid выбранный пользователь (required)
     * @param testId testId для поиска нужного теста (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Long> finishTestWithHttpInfo(Long userUuid, Long testId) throws ApiException {
        com.squareup.okhttp.Call call = finishTestValidateBeforeCall(userUuid, testId, null, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * конец теста и получение результата (asynchronously)
     * метод предназначен для завершения теста
     * @param userUuid выбранный пользователь (required)
     * @param testId testId для поиска нужного теста (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call finishTestAsync(Long userUuid, Long testId, final ApiCallback<Long> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = finishTestValidateBeforeCall(userUuid, testId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllTests
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllTestsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/test/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllTestsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllTestsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Получить список тестов
     * метод предназначен для получения списка тестов
     * @return List&lt;Test&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Test> getAllTests() throws ApiException {
        ApiResponse<List<Test>> resp = getAllTestsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Получить список тестов
     * метод предназначен для получения списка тестов
     * @return ApiResponse&lt;List&lt;Test&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Test>> getAllTestsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllTestsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<Test>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Получить список тестов (asynchronously)
     * метод предназначен для получения списка тестов
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllTestsAsync(final ApiCallback<List<Test>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllTestsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Test>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLastResult
     * @param userUuid userUuid для поиска (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLastResultCall(Long userUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/test/latest/{userUuid}"
            .replaceAll("\\{" + "userUuid" + "\\}", apiClient.escapeString(userUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLastResultValidateBeforeCall(Long userUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling getLastResult(Async)");
        }
        

        com.squareup.okhttp.Call call = getLastResultCall(userUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * получение последнего результата
     * метод предназначен для получения списка всех операций
     * @param userUuid userUuid для поиска (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Long getLastResult(Long userUuid) throws ApiException {
        ApiResponse<Long> resp = getLastResultWithHttpInfo(userUuid);
        return resp.getData();
    }

    /**
     * получение последнего результата
     * метод предназначен для получения списка всех операций
     * @param userUuid userUuid для поиска (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Long> getLastResultWithHttpInfo(Long userUuid) throws ApiException {
        com.squareup.okhttp.Call call = getLastResultValidateBeforeCall(userUuid, null, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * получение последнего результата (asynchronously)
     * метод предназначен для получения списка всех операций
     * @param userUuid userUuid для поиска (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLastResultAsync(Long userUuid, final ApiCallback<Long> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLastResultValidateBeforeCall(userUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestAnswer
     * @param userUuid выбранный пользователь (required)
     * @param testId testId для поиска нужного теста (required)
     * @param questionId questionId для поиска нужного вопроса (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestAnswerCall(Long userUuid, Long testId, Long questionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/test/{testId}/{questionId}"
            .replaceAll("\\{" + "testId" + "\\}", apiClient.escapeString(testId.toString()))
            .replaceAll("\\{" + "questionId" + "\\}", apiClient.escapeString(questionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userUuid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userUuid", userUuid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestAnswerValidateBeforeCall(Long userUuid, Long testId, Long questionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling getTestAnswer(Async)");
        }
        
        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling getTestAnswer(Async)");
        }
        
        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling getTestAnswer(Async)");
        }
        

        com.squareup.okhttp.Call call = getTestAnswerCall(userUuid, testId, questionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * получить вопрос и варианты ответа
     * метод предназначен для получения вариантов ответа
     * @param userUuid выбранный пользователь (required)
     * @param testId testId для поиска нужного теста (required)
     * @param questionId questionId для поиска нужного вопроса (required)
     * @return Question
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Question getTestAnswer(Long userUuid, Long testId, Long questionId) throws ApiException {
        ApiResponse<Question> resp = getTestAnswerWithHttpInfo(userUuid, testId, questionId);
        return resp.getData();
    }

    /**
     * получить вопрос и варианты ответа
     * метод предназначен для получения вариантов ответа
     * @param userUuid выбранный пользователь (required)
     * @param testId testId для поиска нужного теста (required)
     * @param questionId questionId для поиска нужного вопроса (required)
     * @return ApiResponse&lt;Question&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Question> getTestAnswerWithHttpInfo(Long userUuid, Long testId, Long questionId) throws ApiException {
        com.squareup.okhttp.Call call = getTestAnswerValidateBeforeCall(userUuid, testId, questionId, null, null);
        Type localVarReturnType = new TypeToken<Question>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * получить вопрос и варианты ответа (asynchronously)
     * метод предназначен для получения вариантов ответа
     * @param userUuid выбранный пользователь (required)
     * @param testId testId для поиска нужного теста (required)
     * @param questionId questionId для поиска нужного вопроса (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestAnswerAsync(Long userUuid, Long testId, Long questionId, final ApiCallback<Question> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestAnswerValidateBeforeCall(userUuid, testId, questionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Question>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postTestAnswer
     * @param userUuid выбранный пользователь (required)
     * @param testId testId для поиска нужного теста (required)
     * @param questionId questionId для поиска нужного вопроса (required)
     * @param answerId answerId для поиска нужного вопроса (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postTestAnswerCall(Long userUuid, Long testId, Long questionId, Long answerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/test/{testId}/{questionId}/{answerId}"
            .replaceAll("\\{" + "testId" + "\\}", apiClient.escapeString(testId.toString()))
            .replaceAll("\\{" + "questionId" + "\\}", apiClient.escapeString(questionId.toString()))
            .replaceAll("\\{" + "answerId" + "\\}", apiClient.escapeString(answerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userUuid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userUuid", userUuid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postTestAnswerValidateBeforeCall(Long userUuid, Long testId, Long questionId, Long answerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling postTestAnswer(Async)");
        }
        
        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling postTestAnswer(Async)");
        }
        
        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling postTestAnswer(Async)");
        }
        
        // verify the required parameter 'answerId' is set
        if (answerId == null) {
            throw new ApiException("Missing the required parameter 'answerId' when calling postTestAnswer(Async)");
        }
        

        com.squareup.okhttp.Call call = postTestAnswerCall(userUuid, testId, questionId, answerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * отправить ответ
     * метод предназначен для отправления ответа на вопрос
     * @param userUuid выбранный пользователь (required)
     * @param testId testId для поиска нужного теста (required)
     * @param questionId questionId для поиска нужного вопроса (required)
     * @param answerId answerId для поиска нужного вопроса (required)
     * @return Answer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Answer postTestAnswer(Long userUuid, Long testId, Long questionId, Long answerId) throws ApiException {
        ApiResponse<Answer> resp = postTestAnswerWithHttpInfo(userUuid, testId, questionId, answerId);
        return resp.getData();
    }

    /**
     * отправить ответ
     * метод предназначен для отправления ответа на вопрос
     * @param userUuid выбранный пользователь (required)
     * @param testId testId для поиска нужного теста (required)
     * @param questionId questionId для поиска нужного вопроса (required)
     * @param answerId answerId для поиска нужного вопроса (required)
     * @return ApiResponse&lt;Answer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Answer> postTestAnswerWithHttpInfo(Long userUuid, Long testId, Long questionId, Long answerId) throws ApiException {
        com.squareup.okhttp.Call call = postTestAnswerValidateBeforeCall(userUuid, testId, questionId, answerId, null, null);
        Type localVarReturnType = new TypeToken<Answer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * отправить ответ (asynchronously)
     * метод предназначен для отправления ответа на вопрос
     * @param userUuid выбранный пользователь (required)
     * @param testId testId для поиска нужного теста (required)
     * @param questionId questionId для поиска нужного вопроса (required)
     * @param answerId answerId для поиска нужного вопроса (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postTestAnswerAsync(Long userUuid, Long testId, Long questionId, Long answerId, final ApiCallback<Answer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postTestAnswerValidateBeforeCall(userUuid, testId, questionId, answerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Answer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startTest
     * @param userUuid выбранный пользователь (required)
     * @param testId testId для поиска (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startTestCall(Long userUuid, Long testId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/test/start/{testId}"
            .replaceAll("\\{" + "testId" + "\\}", apiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userUuid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userUuid", userUuid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startTestValidateBeforeCall(Long userUuid, Long testId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userUuid' is set
        if (userUuid == null) {
            throw new ApiException("Missing the required parameter 'userUuid' when calling startTest(Async)");
        }
        
        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling startTest(Async)");
        }
        

        com.squareup.okhttp.Call call = startTestCall(userUuid, testId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * запуск теста и получение количества вопросов
     * метод предназначен для запуска теста и получения количества вопросов
     * @param userUuid выбранный пользователь (required)
     * @param testId testId для поиска (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Long startTest(Long userUuid, Long testId) throws ApiException {
        ApiResponse<Long> resp = startTestWithHttpInfo(userUuid, testId);
        return resp.getData();
    }

    /**
     * запуск теста и получение количества вопросов
     * метод предназначен для запуска теста и получения количества вопросов
     * @param userUuid выбранный пользователь (required)
     * @param testId testId для поиска (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Long> startTestWithHttpInfo(Long userUuid, Long testId) throws ApiException {
        com.squareup.okhttp.Call call = startTestValidateBeforeCall(userUuid, testId, null, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * запуск теста и получение количества вопросов (asynchronously)
     * метод предназначен для запуска теста и получения количества вопросов
     * @param userUuid выбранный пользователь (required)
     * @param testId testId для поиска (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startTestAsync(Long userUuid, Long testId, final ApiCallback<Long> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startTestValidateBeforeCall(userUuid, testId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
